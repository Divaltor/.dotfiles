[tool.ruff]
line-length = 100
target-version = "py312"

src = ["src"]
output-format = "grouped"
show-fixes = true

[tool.ruff.lint]
# F (pyflakes) is included by default
extend-select = ["ALL"]
extend-ignore = [
  "D10",    # Missing docstrings everywhere,
  "D401",   # 	First line should be in imperative mood
  "ANN101", # Missing type annotation for self in a class method
  "ANN102", # Missing type annotation for cls in a classmethod
  "ANN401", # Dynamically typed expressions are disallowed
  "A003",   # Class attribute shadowing built-in
  "E501",   # Line too long
  "D212",   # Multi-line docstring summary should start at the first line
  "TRY003", # Avoid specifying long messages outside the exception class
  "S311",   # Standard pseudo-random generators are not suitable for cryptographic purposes
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "RUF001", # String contains ambiguous {}. Did you mean {}?
  "RUF002", # Docstring contains ambiguous {}. Did you mean {}?
  "RUF003", # Comment contains ambiguous {}. Did you mean {}?
  "UP040",  # Type alias {name} uses TypeAlias annotation instead of the type keyword
  "ISC001", # Implicit string concatenation
  "TD002",
  "TD003",
  "FIX002",
  "CPY",
  "ERA",
  "T201"
]
unfixable = ["F841"] # Unused variable
extend-safe-fixes = ["TCH"]
preview = true

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel", "pydantic.RootModel"]
runtime-evaluated-decorators = [
  "dataclasses.dataclass",
  "pydantic.validate_call",
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["F401"]
"**/tests/*.py" = ["S10", "D1", "ANN", "ARG001"]
"**/migrations/*.py" = ["I", "N806", "ANN", "ARG"]
"**/workers/signals.py" = ["ANN"]
"**/models/*.py" = ["DJ001"]
"**/*.pyi" = ["E3"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false
fixture-parentheses = true

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["classmethod", "pydantic.field_validator"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["src"]
